#lang racket

(require "utils.rkt")

(define prime? (create-prime?))

; Returns the last n of consecutive primes generated by the equation n^2 + an + b, starting from n=0
(define (num-quadratic-primes a b)
  (define (go n)
    (define possible-prime (+ (* n n) (* a n) b))
    (if (prime? possible-prime)
        (go (+ n 1))
        (- n 1)))
  (go 0))

(define (solve)
  (define max-a 0)
  (define max-b 0)
  (define max-prime 0)
  (define (go a b)
    (define current-prime (num-quadratic-primes a b))
    (cond [(> current-prime max-prime)
           (set! max-prime current-prime)
           (set! max-a a)
           (set! max-b b)])
    (if (and (= a 999) (= b 1000))
        null
        (if (= b 1000)
            (go (+ 1 a) -1000)
            (go a (+ 1 b)))))
    (go -999 -1000)
    (values max-a max-b max-prime))

(test-on-eq (lambda (l) (apply num-quadratic-primes l)) `(-79 1601) 79)
(test-on-eq (lambda (l) (apply num-quadratic-primes l)) `(1 41) 39)

(let-values ([(max-a max-b max-prime) (solve)])
  (for-each display (list "a: " max-a " b: " max-b ", number primes: " max-prime "\n"
                          "Answer: " (* max-a max-b))))
